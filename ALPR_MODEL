!nvcc --version
!pip install easyocr
!pip install imutils
!pip install opencv-python-headless==4.8.1.78
import cv2
from matplotlib import pyplot as plt
import numpy as np
import imutils
import easyocr
#convert colored images into grayscale format
img =cv2.imread('/content/ALPR1.jpg')
gray= cv2.cvtColor(img,cv2.COLOR_BGR2GRAY)
plt.imshow(cv2.cvtColor(gray,cv2.COLOR_BGR2RGB))
#APPLY FILTER AND EDGE DETECTION
bfilter= cv2.bilateralFilter(gray,11,17,17) #NOISE REDUCTION
edged=cv2.Canny(bfilter,30,200) #EDGE DETECTION
plt.imshow(cv2.cvtColor(edged,cv2.COLOR_BGR2RGB))
location = None
for contour in contours:
    approx = cv2.approxPolyDP(contour, 10, True)
    if len(approx) == 4:
        location = approx
        break
location
mask= np.zeros(gray.shape, np.uint8)
alpr_image= cv2.drawContours(mask,[location],0,225,-1)
alpr_image =cv2.bitwise_and(img,img,mask=mask)
plt.imshow(cv2.cvtColor(alpr_image,cv2.COLOR_BGR2RGB))
(x,y)= np.where(mask==225)
(x1,y1)= (np.min(x) , np.min(y))
(x2,y2)= (np.max(x) , np.max(y))
plate_image= gray[x1:x2+1,y1:y2+1]
plt.imshow(cv2.cvtColor(plate_image,cv2.COLOR_BGR2RGB))
#USE OF EASYOCR TO READ TEXT
reader=easyocr.Reader(['en'])
result=reader.readtext(plate_image)
result
# PLOT THE RESULT
text = result[0][-2]
font = cv2.FONT_HERSHEY_SIMPLEX
res = cv2.putText(img, text=text, org=(approx[0][0][0], approx[1][0][1] + 60), fontFace=font, fontScale=1, color=(0, 255, 200), thickness=3, lineType=cv2.LINE_AA)
res = cv2.polylines(res, [approx], isClosed=True, color=(0, 255, 200), thickness=3)
plt.imshow(cv2.cvtColor(res, cv2.COLOR_BGR2RGB))
plt.show()
img =cv2.imread('/content/ALPR3.jpeg')
gray= cv2.cvtColor(img,cv2.COLOR_BGR2GRAY)
plt.imshow(cv2.cvtColor(gray,cv2.COLOR_BGR2RGB))
bfilter= cv2.bilateralFilter(gray,11,17,17) #NOISE REDUCTION
edged=cv2.Canny(bfilter,30,200) #EDGE DETECTION
plt.imshow(cv2.cvtColor(edged,cv2.COLOR_BGR2RGB))
keypoints= cv2.findContours(edged.copy(), cv2.RETR_TREE , cv2.CHAIN_APPROX_SIMPLE)
contours = imutils.grab_contours(keypoints)
contours = sorted(contours, key=cv2.contourArea, reverse=True)[:10]
location = None
for contour in contours:
    approx = cv2.approxPolyDP(contour, 10, True)
    if len(approx) == 4:
        location = approx
        break
location
mask= np.zeros(gray.shape, np.uint8)
alpr_image= cv2.drawContours(mask,[location],0,225,-1)
alpr_image =cv2.bitwise_and(img,img,mask=mask)
plt.imshow(cv2.cvtColor(alpr_image,cv2.COLOR_BGR2RGB))
(x,y)= np.where(mask==225)
(x1,y1)= (np.min(x) , np.min(y))
(x2,y2)= (np.max(x) , np.max(y))
plate_image= gray[x1:x2+1,y1:y2+1]
plt.imshow(cv2.cvtColor(plate_image,cv2.COLOR_BGR2RGB))
reader=easyocr.Reader(['en'])
result=reader.readtext(plate_image)
result
text = result[0][-2]
font = cv2.FONT_HERSHEY_SIMPLEX
res = cv2.putText(img, text=text, org=(approx[0][0][0], approx[1][0][1] + 60), fontFace=font, fontScale=1, color=(0, 255, 200), thickness=2, lineType=cv2.LINE_AA)
res = cv2.polylines(res, [approx], isClosed=True, color=(0, 255, 200), thickness=2)
plt.imshow(cv2.cvtColor(res, cv2.COLOR_BGR2RGB))
img =cv2.imread('/content/ALPR4.jpg')
gray= cv2.cvtColor(img,cv2.COLOR_BGR2GRAY)
plt.imshow(cv2.cvtColor(gray,cv2.COLOR_BGR2RGB))
bfilter= cv2.bilateralFilter(gray,11,17,17) #NOISE REDUCTION
edged=cv2.Canny(bfilter,30,200) #EDGE DETECTION
plt.imshow(cv2.cvtColor(edged,cv2.COLOR_BGR2RGB))
keypoints= cv2.findContours(edged.copy(), cv2.RETR_TREE , cv2.CHAIN_APPROX_SIMPLE)
contours = imutils.grab_contours(keypoints)
contours = sorted(contours, key=cv2.contourArea, reverse=True)[:10]
location = None
for contour in contours:
    approx = cv2.approxPolyDP(contour, 10, True)
    if len(approx) == 4:
        location = approx
        break
location
mask= np.zeros(gray.shape, np.uint8)
alpr_image= cv2.drawContours(mask,[location],0,225,-1)
alpr_image =cv2.bitwise_and(img,img,mask=mask)
plt.imshow(cv2.cvtColor(alpr_image,cv2.COLOR_BGR2RGB))
(x,y)= np.where(mask==225)
(x1,y1)= (np.min(x) , np.min(y))
(x2,y2)= (np.max(x) , np.max(y))
plate_image= gray[x1:x2+1,y1:y2+1]
plt.imshow(cv2.cvtColor(plate_image,cv2.COLOR_BGR2RGB))
reader=easyocr.Reader(['en'])
result=reader.readtext(plate_image)
result
text = result[0][-2]
font = cv2.FONT_HERSHEY_SIMPLEX
res = cv2.putText(img, text=text, org=(approx[0][0][0], approx[1][0][1] + 60), fontFace=font, fontScale=1, color=(0, 255, 200), thickness=2, lineType=cv2.LINE_AA)
res = cv2.polylines(res, [approx], isClosed=True, color=(0, 255, 200), thickness=2)
plt.imshow(cv2.cvtColor(res, cv2.COLOR_BGR2RGB))
